[{"/Users/wangmeng/Documents/me/react-demop/src/index.js":"1","/Users/wangmeng/Documents/me/react-demop/src/reportWebVitals.js":"2","/Users/wangmeng/Documents/me/react-demop/src/App.js":"3","/Users/wangmeng/Documents/me/react-demop/src/reducer/index.js":"4","/Users/wangmeng/Documents/me/react-demop/src/components/Header.js":"5","/Users/wangmeng/Documents/me/react-demop/src/api/index.js":"6","/Users/wangmeng/Documents/me/react-demop/src/api/request.js":"7","/Users/wangmeng/Documents/me/react-demop/src/mock/index.js":"8","/Users/wangmeng/Documents/me/react-demop/src/components/ClassComponent.js":"9","/Users/wangmeng/Documents/me/react-demop/src/components/Pure.js":"10","/Users/wangmeng/Documents/me/react-demop/src/components/Test1.js":"11","/Users/wangmeng/Documents/me/react-demop/src/components/Refer.js":"12","/Users/wangmeng/Documents/me/react-demop/src/components/Error.js":"13","/Users/wangmeng/Documents/me/react-demop/src/components/Simple.js":"14","/Users/wangmeng/Documents/me/react-demop/src/components/Child.js":"15","/Users/wangmeng/Documents/me/react-demop/src/utils/context-manager.js":"16","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/UseContext1.js":"17","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child1.js":"18","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child2.js":"19","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/UseContext2.js":"20","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child3.js":"21","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseEffect.js":"22","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseState.js":"23","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseCallback.js":"24","/Users/wangmeng/Documents/me/react-demop/src/hooks/useMemo/UseMemo.js":"25","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseRef.js":"26","/Users/wangmeng/Documents/me/react-demop/src/hooks/useMemo/Index.js":"27","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseReducer.js":"28","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/index.js":"29","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Index.js":"30","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/First.js":"31","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Second.js":"32","/Users/wangmeng/Documents/me/react-demop/src/components/Ref.js":"33","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Third.js":"34","/Users/wangmeng/Documents/me/react-demop/src/hooks/useLayoutEffect/Index.js":"35","/Users/wangmeng/Documents/me/react-demop/src/hooks/useLayoutEffect/Target.js":"36","/Users/wangmeng/Documents/me/react-demop/src/hooks/customHook/Index.js":"37","/Users/wangmeng/Documents/me/react-demop/src/hooks/customHook/UseWinSize.js":"38"},{"size":1302,"mtime":1612082003851,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":1609651623225,"results":"41","hashOfConfig":"42"},{"size":4124,"mtime":1612752593637,"results":"43","hashOfConfig":"40"},{"size":727,"mtime":1609862807915,"results":"44","hashOfConfig":"40"},{"size":1651,"mtime":1612752606446,"results":"45","hashOfConfig":"40"},{"size":131,"mtime":1609777786508,"results":"46","hashOfConfig":"40"},{"size":321,"mtime":1609777830726,"results":"47","hashOfConfig":"40"},{"size":225,"mtime":1609812425394,"results":"48","hashOfConfig":"40"},{"size":6015,"mtime":1610334614120,"results":"49","hashOfConfig":"40"},{"size":1206,"mtime":1609868651149,"results":"50","hashOfConfig":"40"},{"size":1922,"mtime":1612082925628,"results":"51","hashOfConfig":"40"},{"size":1384,"mtime":1612082875898,"results":"52","hashOfConfig":"40"},{"size":1014,"mtime":1609870048125,"results":"53","hashOfConfig":"40"},{"size":356,"mtime":1612664531100,"results":"54","hashOfConfig":"40"},{"size":379,"mtime":1609923537044,"results":"55","hashOfConfig":"40"},{"size":262,"mtime":1612237738555,"results":"56","hashOfConfig":"40"},{"size":1988,"mtime":1612687901786,"results":"57","hashOfConfig":"40"},{"size":1168,"mtime":1612687960190,"results":"58","hashOfConfig":"40"},{"size":639,"mtime":1612689145867,"results":"59","hashOfConfig":"40"},{"size":2102,"mtime":1612689595540,"results":"60","hashOfConfig":"40"},{"size":3153,"mtime":1612695612888,"results":"61","hashOfConfig":"40"},{"size":2220,"mtime":1612607279680,"results":"62","hashOfConfig":"40"},{"size":2164,"mtime":1612607288017,"results":"63","hashOfConfig":"40"},{"size":3392,"mtime":1612610177042,"results":"64","hashOfConfig":"40"},{"size":1265,"mtime":1612665158943,"results":"65","hashOfConfig":"40"},{"size":1131,"mtime":1612698596552,"results":"66","hashOfConfig":"40"},{"size":1858,"mtime":1612665378447,"results":"67","hashOfConfig":"40"},{"size":740,"mtime":1612665686765,"results":"68","hashOfConfig":"40"},{"size":2121,"mtime":1612699351481,"results":"69","hashOfConfig":"40"},{"size":2121,"mtime":1612699351481,"results":"70","hashOfConfig":"40"},{"size":1068,"mtime":1612697589403,"results":"71","hashOfConfig":"40"},{"size":1453,"mtime":1612698126226,"results":"72","hashOfConfig":"40"},{"size":321,"mtime":1612698555748,"results":"73","hashOfConfig":"40"},{"size":1263,"mtime":1612699981221,"results":"74","hashOfConfig":"40"},{"size":631,"mtime":1612712431106,"results":"75","hashOfConfig":"40"},{"size":1190,"mtime":1612712439133,"results":"76","hashOfConfig":"40"},{"size":405,"mtime":1612764015966,"results":"77","hashOfConfig":"40"},{"size":883,"mtime":1612753189712,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},"14bfs77",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"19q74hp",{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/wangmeng/Documents/me/react-demop/src/index.js",["175","176","177"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';     // ? 性能优化监听\nimport { BrowserRouter } from 'react-router-dom';\n\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { counter, addFunc, removeFunc, asyncAddFunc } from './reducer/index.js';\nimport thunk from 'redux-thunk';\n\nimport { Provider } from 'react-redux';\n\n// ! redux\n// const store = createStore(counter, window.devToolsExtension ? window.devToolsExtension() : () => {});\n\n// ? redux-thunk\nconst store = createStore(counter, compose(\n    applyMiddleware(thunk),\n    window.devToolsExtension ? window.devToolsExtension() : () => {}\n));\n\nfunction render() {\n    // ! redux\n    // ReactDOM.render(\n    //     <BrowserRouter>\n    //         <App store={store} addFunc={ addFunc } reduceFunc={ removeFunc } asyncAddFunc={ asyncAddFunc } />\n    //     </BrowserRouter>,\n    //     document.getElementById('root')\n    // );\n\n    // ! react-redux\n    ReactDOM.render(\n        <Provider store={ store }>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>,\n        document.getElementById('root')\n    );\n}\nrender();\n\n// ! redux\n// store.subscribe(render);\n\n\n\n// reportWebVitals();\n",["178","179"],"/Users/wangmeng/Documents/me/react-demop/src/reportWebVitals.js",[],["180","181"],"/Users/wangmeng/Documents/me/react-demop/src/App.js",["182"],"/Users/wangmeng/Documents/me/react-demop/src/reducer/index.js",[],"/Users/wangmeng/Documents/me/react-demop/src/components/Header.js",[],"/Users/wangmeng/Documents/me/react-demop/src/api/index.js",[],"/Users/wangmeng/Documents/me/react-demop/src/api/request.js",[],"/Users/wangmeng/Documents/me/react-demop/src/mock/index.js",["183"],"const Mock = require('mockjs');\n\nlet data = Mock.mock('/data', {\n    'code': 0,\n    'msg': 'success',\n    \"data\": [{\n        \"key\": 1,\n        'area': 'CHINA',\n    }, {\n        \"key\": 2,\n        \"area\": \"ANTARCTIC\"\n    }]\n})\n","/Users/wangmeng/Documents/me/react-demop/src/components/ClassComponent.js",["184"],"import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { addFunc, removeFunc, asyncAddFunc, asyncReduceFunc } from '../reducer/index.js';\n\n/**\n * 类组件\n */\n@connect(\n    state => ({num: state}),        // ? 需要什么属性 放什么属性\n\n    { addFunc, removeFunc, asyncAddFunc, asyncReduceFunc }   // ? 需要什么方法，放什么方法\n)\nclass Test1 extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            list: [],\n            type: 0,\n        }\n        this.asyncReduce = this.asyncReduce.bind(this);\n    }\n    add = () =>{\n        let { store, addFunc } = this.props;\n        store.dispatch(addFunc());\n    }\n    reduce() {\n        let { store, reduceFunc } = this.props;\n        store.dispatch(reduceFunc());\n    }\n    asyncAdd = () => {\n        let { store, asyncAddFunc } = this.props;\n        store.dispatch(asyncAddFunc());\n    }\n    asyncReduce() {\n        let { store, asyncReduceFunc } = this.props;\n        store.dispath(asyncReduceFunc());\n    }\n\n\trender() {\n        const { store, addFunc } = this.props;\n\n        // ! redux\n        // const num = store.getState();\n\t\t// return (\n\t\t// \t<div className=\"test1\">\n\t\t// \t\t<p className=\"App-intro\">\n\t\t// \t\t\tthis is test1\n\t\t// \t\t</p>\n        //         <h1>现在这个值是，{num}</h1>\n        //         {/* // ? 同步加 */}\n        //         <button onClick={()=>store.dispatch(addFunc())}>加加加</button>\n        //         {/* // ? 同步减 */}\n        //         <button onClick={ this.reduce.bind(this)} >减减减</button>\n        //         {/* // ? 异步加 */}\n        //         <button onClick={ this.asyncAdd }>等会儿加</button>\n        //         {/* // ? 异步减 */}\n        //         <button onClick={ this.asyncReduce }>等会儿减</button>\n\t\t// \t</div>\n        // );\n\n        // ! react-redux\n        const num = this.props.num\n        return (\n            <div className=\"test1\">\n                <p className=\"App-intro\">\n\t\t \t\t\t欢迎来到类组件\n\t\t \t\t</p>\n                <h1>现在这个值是，{num}</h1>\n                <button className=\"btn\" onClick={ addFunc }>加加加</button>\n                <button className=\"btn\" onClick={ this.props.removeFunc } >减减减</button>\n                <button className=\"btn\" onClick={ this.props.asyncAddFunc }>等会儿加</button>\n                <button className=\"btn\" onClick={ this.props.asyncReduceFunc }>等会儿减</button>\n            </div>\n        );\n    }\n\n    // * 生命周期\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // ? 1：当state需要从props初始化时，使用\n        // ? 2：尽量不使用，维护俩者状态需要消耗额外资源，增加复杂度\n        // ? 3：每次re-rendering之前被调用\n        // * 典型场景： 表单获取默认值\n\n        console.group('getDerivedStateFromProps');\n        console.log('nextProps', nextProps);\n        console.log('prevState', prevState);\n        console.groupEnd();\n\n        const { type } = nextProps;\n        // 当传入的type发生变化的时候，更新state\n        if (type != null && type !== prevState.type) {\n            return {\n                type,\n            };\n        }\n        // 否则，对于state不进行任何操作\n        return null;\n    }\n    /**componentWillMount() {\n        // ! UNSAFE\n        // ? 它代表的过程是组件已经经历了constructor()初始化数据后，但是还未渲染DOM时。\n    }*/\n    componentDidMount() {\n        // ? UI渲染完成后调用\n        // ? 只会执行一次\n        // * 典型场景： 获取外部资源\n        console.group('componentDidMount');\n        console.groupEnd();\n    }\n\n    /**componentWillReceiveProps (nextProps){\n        // ! UNSAFE\n        // ? 在接受父组件改变后的props需要重新渲染组件时用到的比较多\n        // ? 接受一个参数nextProps\n        // ? 通过对比nextProps和this.props，将nextProps的state为当前组件的state，从而重新渲染组件\n    }*/\n    shouldComponentUpdate(nextProps, nextState) {\n        // ? Vistual Dom是否重绘\n        // ? 一般可以由PureComponent自动实现\n        // * 典型场景： 性能优化\n\n        console.group('shouldComponentUpdate');\n        console.log('nextProps', nextProps);\n        console.log('nextState', nextState);\n        console.groupEnd();\n\n        return true;\n    }\n    getSnapshotBeforeUpdate(prevProps, prevState){\n        // ! 基本用不到\n        // ? 在render之前调用，state已更新\n        // * 典型场景： 获取render之前的dom状态\n        // * 通过getSnapshotBeforeUpdate方法，获取dom信息，然后通过componentDidUpdate反映\n\n        console.group('getSnapshotBeforeUpdate');\n        console.log('prevProps', prevProps);\n        console.log('prevState', prevState);\n        console.groupEnd();\n\n        return {\n            'fromSnapshot': 'wmTest'\n        };\n    }\n    /*componentWillUpdate(nextProps,nextState) {\n        // ! UNSAFE\n        // ? 从来没用过\n    }*/\n    componentDidUpdate(perProps, perState, perCustom) {\n        // ? 每次UI更新被调用\n        // * 典型场景： 页面通过props重新获取数据\n\n        console.group('componentDidUpdate');\n        console.log('perProps', perProps);\n        console.log('perState', perState);\n        console.log('perCustom', perCustom);\n        console.groupEnd();\n    }\n\n    componentDidCatch(err, info) {\n        console.group('componentDidCatch');\n        console.groupEnd();\n    }\n    componentWillUnmount() {\n        // ? 组件被移除时调用\n        // * 典型场景： 资源释放\n        console.group('componentWillUnmount');\n        console.groupEnd();\n    }\n}\n\n// ! react-redex 普通调用方式\n// const mapStateProps = (state) => {\n//     return {num: state}\n// }\n// const actionCreate = { addFunc, removeFunc, asyncAddFunc, asyncReduceFunc };\n// Test1 = connect(mapStateProps, actionCreate)(Test1);\n\nexport default Test1;\n","/Users/wangmeng/Documents/me/react-demop/src/components/Pure.js",["185"],"import React, { PureComponent } from 'react';\n\nclass Pure extends PureComponent {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        console.group('%cPure-componentDidMount', 'color: red;');\n        console.groupEnd();\n    }\n\n    componentDidUpdate(perProps, perState, perCustom) {\n        // ? 每次UI更新被调用\n        // * 典型场景： 页面通过props重新获取数据\n\n        console.group('%cPure-componentDidUpdate', 'color: red;');\n        console.log('perProps', perProps);\n        console.log('perState', perState);\n        console.groupEnd();\n    }\n\n    componentWillUnmount() {\n        console.group('%cPure-componentWillUnmount', 'color: red;');\n        console.groupEnd();\n    }\n\n    render() {\n        const { items, val } = this.props;\n        return (\n            <div className=\"box\">\n                <p>PureComponent</p>\n                <div>\n                    <span>数组: </span>\n                    <span>{ items }</span>\n                </div>\n                <div>\n                    <span>数值: </span>\n                    <span>{ val }</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Pure;\n","/Users/wangmeng/Documents/me/react-demop/src/components/Test1.js",["186"],"import React, { Component } from 'react';\nimport Refer from './Refer.js';\nimport Pure from './Pure.js';\nclass Test1 extends Component {\n    // ? 对比Component和PureComponent\n    // * 1. 生命周期的加深理解\n    // * 2. PureComponent 浅比较\n    // * 3. 规避 pureComponent 浅比较\n    // * 4. 父子生命周期的先后执行顺序\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: ['a'],\n            value: 0\n        }\n        this.handleClick2 = this.handleClick2.bind(this);\n    }\n\n    handleClick1 = () => {\n        const { items } = this.state;\n        // items.push('b');\n        // this.setState({\n        //     items\n        // })\n\n\n        // // ! 规避 pureComponent浅比较\n        this.setState(prevState => ({\n            items: [...prevState.items, 'b'],\n        }));\n        console.log(this.state)\n    }\n\n    handleClick2() {\n        this.setState({\n            value: Math.floor(Math.random() * 10) + 1\n        });\n        console.log(this.state)\n    }\n\n    render() {\n        const { items, value } = this.state;\n        return (\n            <div className=\"outer_box\">\n                <Refer items={items} val={value} />\n                <Pure items={items} val={value} ></Pure>\n\n                <button className=\"btn btn_click\" onClick={this.handleClick1}>触发数组改变</button>\n                <button className=\"btn btn_click\" onClick={this.handleClick2}>触发数值改变</button>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        console.group('%cParent-componentDidMount', 'color: blue;')\n        console.groupEnd()\n    }\n\n    componentDidUpdate() {\n        console.group('%cParent-componentDidUpdate', 'color: blue;')\n        console.groupEnd()\n    }\n\n    componentWillUnmount() {\n        console.group('%cParent-componentWillUnmount', 'color: blue;')\n        console.groupEnd()\n    }\n\n}\n\nexport default Test1;\n","/Users/wangmeng/Documents/me/react-demop/src/components/Refer.js",["187"],"import React, { Component } from 'react';\n\nclass Refer extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"box\">\n                <p>Component</p>\n                <div>\n                    <span>数组: </span>\n                    <span>{ this.props.items }</span>\n                </div>\n                {/* // ! 这里有个小坑 */}\n                <div>同一节点下的数组: { this.props.items }</div>\n                <div>\n                    <span>数值: </span>\n                    <span>{ this.props.val }</span>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        console.group('%cNormal-componentDidMount', 'color: green;');\n        console.groupEnd();\n    }\n\n    componentDidUpdate(perProps, perState, perCustom) {\n        // ? 每次UI更新被调用\n        // * 典型场景： 页面通过props重新获取数据\n\n        console.group('%cNormal-componentDidUpdate', 'color: green;');\n        console.log('perProps', perProps);\n        console.log('perState', perState);\n        console.groupEnd();\n    }\n\n    componentWillUnmount() {\n        console.group('%cNormal-componentWillUnmount', 'color: green;');\n        console.groupEnd();\n    }\n}\n\nexport default Refer;\n","/Users/wangmeng/Documents/me/react-demop/src/components/Error.js",[],"/Users/wangmeng/Documents/me/react-demop/src/components/Simple.js",[],"/Users/wangmeng/Documents/me/react-demop/src/components/Child.js",[],["188","189"],"/Users/wangmeng/Documents/me/react-demop/src/utils/context-manager.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/UseContext1.js",["190","191"],"import React, { useContext, useState } from 'react';\nimport Child from './Child1.js';\nimport { TestContext } from '../../utils/context-manager.js';\n\n/**\n * 1. 如果要使用创建的上下文，需要通过 Context.Provider 最外层包装组件，并且需要显示的通过 <TestContext.Provider value={{xx:xx}}> 的方式传入 value，指定 context 要对外暴露的信息。\n * 2. 一般的做法是将父组件的方法比如 setXXX 通过 props 的方式传给子组件，而一旦子组件多层级的话，就要层层透传。\n */\n\n// ? 使用 Context 的方式则可以免去这种层层透传子组件在匹配过程中只会匹配最新的 Provider，也就是说如果有下面三个组件：ContextA.Provider->A->ContexB.Provider->B->C, 如果 ContextA 和 ContextB 提供了相同的方法，则 C 组件只会选择 ContextB 提供的方法。\n\nconst fetchData = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(1);\n        });\n    })\n}\nexport default (props = {}) => {\n\n    const [step, setStep] = useState(0);\n    const [number, setNumber] = useState(0);\n    const [count, setCount] = useState(0);\n    const temp1 = `1. 如果要使用创建的上下文，需要通过 Context.Provider 最外层包装组件，并且需要显示的通过 <TestContext.Provider value={{xx:xx}}> 的方式传入 value，指定 context 要对外暴露的信息。`;\n    const temp2 = `2. 一般的做法是将父组件的方法比如 setXXX 通过 props 的方式传给子组件，而一旦子组件多层级的话，就要层层透传。`;\n    const temp3 = `<Child step={step} number={number} count={count} />`;\n\n    return (\n        <TestContext.Provider value={{ setStep, setCount, setNumber, fetchData }}>\n            <h3>useContext</h3>\n            <p>{ temp1 }</p>\n            <p>{ temp2 }</p>\n            <p>{ temp3 }</p>\n            <Child step={step} number={number} count={count} />\n        </TestContext.Provider>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child1.js",["192","193"],"import React, { useContext, useEffect, memo } from 'react'\nimport Child from './Child2.js';\n\nimport { TestContext } from '../../utils/context-manager.js';\n\nexport default (props = {}) => {\n    const { setStep, setNumber, setCount, fetchData } = useContext(TestContext);\n    const temp = `const { setStep, setNumber, setCount, fetchData } = useContext(TestContext);`;\n\n    useEffect(() => {\n        fetchData().then(res => {\n            console.log(`FETCH DATA: ${res}`);\n        })\n    });\n\n    let { step, count, number } = props;\n    return (\n        <div className=\"box\">\n            <div className=\"red\">{ temp }</div>\n            <div>step is : { step }</div>\n            <div>number is : { number }</div>\n            <div>count is : { count }</div>\n\n            <div>\n                <button onClick={() => { setStep(step + 1)}}>step++</button>\n                <button onClick={() => { setNumber(number + 1)}}>number++</button>\n                <button onClick={() => { setCount(count + 1)}}>count++</button>\n            </div>\n\n            <div>\n                <Child step={step} number={number} count={count}></Child>\n            </div>\n        </div>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child2.js",["194"],"import React, { useContext } from 'react';\nimport { TestContext } from '../../utils/context-manager.js';\n\nexport default (props = {}) => {\n    const { setStep, setNumber, setCount } = useContext(TestContext);\n    const temp = `const { setStep, setNumber, setCount } = useContext(TestContext);`;\n    return (\n        <div className=\"box\">\n            <div>{ temp }</div>\n            <button onClick={() => { setStep(props.step + 1)}}>step++</button>\n            <button onClick={() => { setNumber(props.number + 1)}}>number++</button>\n            <button onClick={() => { setCount(props.count + 1)}}>count++</button>\n        </div>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/UseContext2.js",["195","196"],"import React, { useReducer, useState } from 'react';\nimport Child from './Child3.js';\nimport { TestContext } from '../../utils/context-manager.js';\n\n/**\n * 1. 如果要使用创建的上下文，需要通过 Context.Provider 最外层包装组件，并且需要显示的通过 <TestContext.Provider value={{xx:xx}}> 的方式传入 value，指定 context 要对外暴露的信息。\n * 2. 一般的做法是将父组件的方法比如 setXXX 通过 props 的方式传给子组件，而一旦子组件多层级的话，就要层层透传。\n * 3. 所有的方法都放在了 Context.Provider.value 属性中传递，必然造成整个 Context Provider 提供的方法越来越多，也会臃肿。\n */\n\n// ? 使用 Context 的方式则可以免去这种层层透传子组件在匹配过程中只会匹配最新的 Provider，也就是说如果有下面三个组件：ContextA.Provider->A->ContexB.Provider->B->C, 如果 ContextA 和 ContextB 提供了相同的方法，则 C 组件只会选择 ContextB 提供的方法。\n\nconst initState = { count: 0, step: 0, number: 0};\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case 'stepInc':\n            return Object.assign({}, state, { step: state.step + 1});\n        case 'numberInc':\n            return Object.assign({}, state, { number: state.number + 1});\n        case 'count':\n            return Object.assign({}, state, { count: state.step + state.number});\n        default:\n            return state;\n    }\n}\nexport default (props = {}) => {\n\n    const [state, dispatch] = useReducer(reducer, initState);\n    const temp1 = `const [state, dispatch] = useReducer(reducer, initState);`;\n    const temp2 = `<TestContext.Provider value={{ state, dispatch }}>`\n\n    return (\n        <TestContext.Provider value={{ state, dispatch }}>\n            <h3>useContext + useReducer</h3>\n            <div className=\"red\">{ temp1 }</div>\n            <div className=\"red\">{ temp2 }</div>\n            <button onClick={() => { dispatch({type: 'stepInc'}) }}>parent step ++</button>\n            <Child />\n        </TestContext.Provider>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useContext/Child3.js",["197"],"import React, { useContext, memo, useMemo } from 'react';\n\nimport { TestContext } from '../../utils/context-manager.js';\n\n// ? 在点击子组件的 【number + step】 按钮的时候, 虽然count的值没有发生任何变化， 但是一直触发re-render， 即使子组件是通过React.memo包装过的\n// ! 出现这个问题的原因 是React.memo只会对props进行浅比较， 而通过Context我们直接将state注入到了组件内部，因此state的变化必然会触发re-render，整个state变化时绕过了memo\nexport default memo( (props={}) => {\n    const { state, dispatch } = useContext(TestContext);\n    return (\n        <div className=\"box\">\n            { console.log('[Child] RE-RENDER') }\n            <div>{`将整个 state 通过 Context 传入就无需层层组件的 props 传递（如果不需要整个state，可以只将某几个 state 给 Provider）`}</div>\n            <div>{`  `}</div>\n            <div>step is : {state.step} </div>\n            <div>number is : {state.number} </div>\n            <div>count is : {state.count} </div>\n            <div className=\"red\">{ `在点击子组件的 【number + step】 按钮的时候, 虽然count的值没有发生任何变化， 但是一直触发re-render， 即使子组件是通过React.memo包装过的` }</div>\n            <div className=\"red\">{ `出现这个问题的原因 是React.memo只会对props进行浅比较， 而通过Context我们直接将state注入到了组件内部，因此state的变化必然会触发re-render，整个state变化时绕过了memo` }</div>\n            <div className=\"red\">{ `React.memo() 无法拦截注入到Context的state变化， 那就需要我们在组件内部进行更细粒度的性能优化 —— useMemo()` }</div>\n            <div>\n                <button onClick={() => dispatch({ type: 'stepInc'})}>step ++</button>\n                <button onClick={() => dispatch({ type: 'numberInc'})}>number ++</button>\n                {/* // ! 直接使用父组件 state 带来的性能问题 */}\n                <button onClick={() => dispatch({ type: 'count'})}>count ++</button>\n            </div>\n        </div>\n    )\n})\n\n// ! React.memo() 无法拦截注入到Context的state变化， 那就需要我们在组件内部进行更细粒度的性能优化 —— useMemo()\n// export default (props = {}) => {\n//     const { state, dispatch } = useContext(TestContext);\n//     let { step, number, count } = state;\n//     return useMemo(() => {\n//         { console.log('[Child] RE-RENDER') }\n//         return (\n//             <div className=\"box\">\n//                 <div>step is : {step}</div>\n//                 <div>number is : {number}</div>\n//                 <div>count is : {count}</div>\n\n//                 <div>\n//                     <button onClick={() => { dispatch({type: 'stepInc'}) }}>step ++</button>\n//                     <button onClick={() => { dispatch({type: 'numberInc'}) }}>number ++</button>\n//                     <button onClick={() => { dispatch({type: 'count'}) }}>number + step</button>\n//                 </div>\n//             </div>\n//         )\n//     }, [count, number, step, dispatch])\n// }\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseEffect.js",["198"],"import React, { useState, useEffect } from 'react';\n\nimport { getData } from \"../api\"\n\nconst Test3 = () => {\n    // ? 组件要点\n    // * 1. 空根节点\n    // * 2. hooks: useEffect\n    // * 3. 解构赋值\n    // * 4. interface -> updateData\n\n    const [data, setData] = useState([]);\n    const [ta, setTa] = useState(0);\n\n    // * 不传递第二个参数 -> 每次render之后都会执行这个 useEffect\n    // ! 模拟 componentDidUpdate\n    useEffect(() => {\n        console.log('%ccomponentDidUpdate', 'color: red;')\n    });\n\n    // * 传递 空数组[] -> 除了第一次挂在组件时会执行， 其他时间更新组件的时候不会执行\n    // * 因为不依赖任何变量， 也就是依赖不会变更\n    // ! 模拟 componentDidMount\n    useEffect(() => {\n        console.log('%ccomponentDidMount', 'color: green;');\n        getData().then(res => {\n            console.log(res);\n            if (res.code === 0) {\n                setData(res.data)\n            }\n        })\n\n        // let res = await getData();\n        // if (res.code === 0) {\n        //     setData(res.data)\n        // }\n    }, []);\n\n    // * 传递一个依赖数组 -> 只有在数组内的state 改变时才会执行\n    useEffect(() => {\n        console.log('ta来了~ta来了');\n    }, [ta]);\n\n\n    // * useEffect的第二个参数，是一个数组，就像一个依赖列表。当状态值发生变化时我们才进行解绑。\n    // * 所以当传空数组时，也就是当组件被销毁时才进行解绑 变相实现了componentWillUnmount的生命周期\n    // ! 模拟 componentWillUnmount\n    useEffect( () => {\n        return () => {\n            console.log('%ccomponentWillUnmount', 'color: green;')\n        }\n    }, [])\n\n\n    return (\n        <>\n            <p className=\"title\">\n                useEffect\n            </p>\n            <div>\n                <button onClick={() => setData([...data, { 'key': Math.floor(Math.random()) + 1, 'area': 'ANYWHERE'}])}>改变data</button>\n            </div>\n            <ul>\n                {data.map((item, index) => {\n                    return <li key={ index }>{ item.area }</li>\n                })}\n            </ul>\n        </>\n    )\n}\n\nexport default Test3;\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/UseState.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/UseCallback.js",["199","200"],"import React, { memo, useState, useCallback } from 'react';\n\n// ! useCallback\n// ! 目的：1.减少render次数；2. 减少计算量\n\n// ? 思路\n/**\n * 1. 点击事件handleClick1触发时， B组件也会重新渲染， 当B组件比较耗时时， 就会造成性能问题\n * 2. B组件重新渲染的原因在于: 每次重新渲染, onClick都会重新定义, 即上次与这次的不一致\n * 3. 思路：通过useCallback包裹onClick来达到缓存的效果， 即useCallback的依赖项不变时不重新生成\n * 4. 通过memo方法包裹B组件， 并且通过useCallback包裹B组件的onClick方法，memo与pureComponent类似（对传入组件的数据浅比较），useCallback则会保证handleClick2不会发生变化\n */\n\nfunction A(props) {\n    const { onClick, children } = props;\n    console.log('AAA', props)\n    return (\n        <div className=\"box\" onClick={onClick}>\n            <h3>A组件</h3>\n            <div>a: {children}</div>\n        </div>\n    )\n}\n\nfunction B(props) {\n    const { onClick, children } = props;\n    const strB = `<Bmemo onClick={ handleClick2 }>{b}</Bmemo>`;\n    console.log('BBB', props)\n    return (\n        <div className=\"box\" onClick={onClick}>\n            <h3>B组件(对照组件)</h3>\n            <div>{ strB }</div>\n            <p className=\"red\">应用了memo包裹组件后，尽管没有数据依赖更新，但是仍然每次会触发render</p>\n            <h4 className=\"red\">B组件绑定有onClick事件，所以尽管数据浅比较通过，但是onClick是一个引用，所以依然会触发重新渲染</h4>\n            <div>b: {children}</div>\n        </div>\n    )\n}\n\nfunction Temp({ onClick, name }) {\n    console.log('CCC');\n    const strC = `<C onClick={ handleClick3 } name={c} />`\n    return (\n        <div className=\"box\" onClick={onClick}>\n            <h3>memo + useCallback 组件</h3>\n            <div>c: {name}</div>\n        </div>\n\n    )\n}\n\nconst Bmemo = memo(B)\nconst C = memo(Temp);\n\nconst useCallBack = () => {\n    // ? 性能优化 hooks: useCallback\n    // * 在使用值和函数的情况，需要考虑有没有函数传递给子组件使用useCallback\n\n    const [a, setA] = useState(0);\n    const [b, setB] = useState(0);\n    const [c, setC] = useState(0);\n\n    const handleClick1 = () => {\n        setA(a + 1);\n    }\n\n    const handleClick2 = () => {\n        setB(b + 1)\n    }\n\n    const handleClick3 = useCallback(() => {\n        setB(c + 1);\n    }, [c])\n\n    return (\n        <>\n            <div >\n                <div>1. 点击事件handleClick1触发时， B组件也会重新渲染， 当B组件比较耗时时， 就会造成性能问题</div>\n                <div>2. B组件重新渲染的原因在于: 每次重新渲染, onClick都会重新定义, 即上次与这次的不一致</div>\n                <h4>3. 思路：通过useCallback包裹onClick来达到缓存的效果， 即useCallback的依赖项不变时不重新生成</h4>\n                <h4>4. 通过memo方法包裹组件， 并且通过useCallback包裹组件的onClick方法，memo与pureComponent类似（对传入组件的数据浅比较），useCallback则会保证handleClick不会发生变化</h4>\n            </div>\n            <A onClick={ handleClick1 }>{a}</A>\n            <Bmemo onClick={ handleClick2 }>{b}</Bmemo>\n            <C onClick={ handleClick3 } name={c} />\n        </>\n    );\n}\n\nexport default useCallBack;\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useMemo/UseMemo.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/UseRef.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useMemo/Index.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/UseReducer.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/index.js",["201","202","203","204","205","206"],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Index.js",["207","208","209","210","211","212","213"],"import React, { forwardRef, useImperativeHandle, useRef, useState, useCallback } from 'react';\nimport { Route } from 'react-router-dom';\nimport First from './First.js';\nimport Second from './Second.js';\nimport Third from './Third.js';\n\n// * useImperativeHandle可以让你在使用ref时自定义暴露给父组件的实例值。\n// ! 在大多数情况下，应当避免使用ref这样的命令式代码。\n// ? useImperativeHandle应当与forwardRef一起使用。\n\n/**\n * useImperativeHandle\n * useImperativeHandle可以让你在使用ref时自定义暴露给父组件的实例值。\n * 在大多数情况下，应当避免使用ref这样的命令式代码。\n * useImperativeHandle应当与forwardRef一起使用。\n * 作用: 减少暴露给父组件获取的DOM元素属性, 只暴露给父组件需要用到的DOM方法\n * 参数1: 父组件传递的ref属性\n * 参数2: 返回一个对象, 以供给父组件中通过ref.current调用该对象中的方法\n */\nconst TestInput = forwardRef((props, ref) => {\n    return <input type=\"text\" ref={ref} />\n});\n\nexport default () => {\n    return (\n        <>\n            <h3>useImperativeHandle</h3>\n            <div className=\"green\">{ `作用: 减少暴露给父组件获取的DOM元素属性, 只暴露给父组件需要用到的DOM方法` }</div>\n            <div className=\"blue\">{ `参数1: 父组件传递的ref属性` }</div>\n            <div className=\"blue\">{ `参数2: 返回一个对象, 以供给父组件中通过ref.current调用该对象中的方法` }</div>\n            <div>{`正常情况下 ref 是不能挂在到函数组件上的，因为函数组件没有实例`}</div>\n            <div>{`useImperativeHandle 为我们提供了一个类似实例的东西。`}</div>\n            <div>{`useImperativeHandle 的第 2 个参数，所返回的对象的内容挂载到 父组件的 ref.current 上`}</div>\n            <div>{`forwardRef会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。`}</div>\n            <First  />\n            <Second />\n            <Third />\n        </>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/First.js",["214","215","216","217"],"import React, { forwardRef, useImperativeHandle, useRef, useState, useCallback } from 'react';\n\nconst TestInput = forwardRef((props, ref) => {\n    return <input type=\"text\" ref={ref} />\n});\n\nexport default () => {\n    const childRef = useRef(null);\n\n    const getFocus = () => {\n        childRef.current.focus();\n    }\n\n    return (\n        <div className=\"box\">\n            <div>{ `通过forwardRef可以将ref转发给子组件` }</div>\n            <div>{ `子组件拿到父组件创建的ref, 绑定到自己的某一个元素中` }</div>\n            <div>{ `<TestInput ref={childRef}></TestInput>` }</div>\n\n            <div>\n                <TestInput ref={childRef}></TestInput><button onClick={getFocus}>聚焦</button>\n            </div>\n            <div className=\"red\">{`直接暴露给父组件带来的问题是某些情况的不可控`}</div>\n            <div className=\"red\">{`父组件可以拿到DOM后进行任意的操作, 我们只是希望父组件可以操作的focus，其他并不希望它随意操作其他方法`}</div>\n        </div>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Second.js",["218"],"import React, { useRef, forwardRef, useImperativeHandle } from 'react'\n\nconst TestInput = forwardRef((props, ref) => {\n    const inputRef = useRef();\n    // 作用: 减少父组件获取的DOM元素属性,只暴露给父组件需要用到的DOM方法\n    // 参数1: 父组件传递的ref属性\n    // 参数2: 返回一个对象,父组件通过ref.current调用对象中方法\n    useImperativeHandle(ref, () => ({\n        focus: () => {\n            inputRef.current.focus()\n        },\n    }))\n    return <input type=\"text\" ref={inputRef} />\n})\n\nexport default () => {\n    // useImperativeHandle 主要作用:用于减少父组件中通过forward+useRef获取子组件DOM元素暴露的属性过多\n    // 为什么使用: 因为使用forward+useRef获取子函数式组件DOM时,获取到的dom属性暴露的太多了\n    // 解决: 使用uesImperativeHandle解决,在子函数式组件中定义父组件需要进行DOM操作,减少获取DOM暴露的属性过多\n    const el = useRef();\n\n    return (\n        <div className=\"box\">\n            <div>{`通过useImperativeHandle的Hook, 将父组件传入的ref和useImperativeHandle第二个参数返回的对象绑定到了一起`}</div>\n            <div>{`所以在父组件中, 调用inputRef.current时, 实际上是返回的对象`}</div>\n            <div>\n                <TestInput ref={el} /><button onClick={() => el.current.focus()}>聚焦</button>\n            </div>\n        </div>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/components/Ref.js",[],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useImperativeHandle/Third.js",["219","220"],"import React, {forwardRef, useImperativeHandle, useRef, useState } from 'react';\n\nconst Child = forwardRef((props, cref) => {\n    const [count, setCount] = useState(0);\n    const [num, setNum] = useState(0);\n\n    const inputRef = useRef(null);\n\n    useImperativeHandle(cref, () => ({\n        name: '子组件暴露给父组件的name属性',\n        focus: () => {\n            inputRef.current && inputRef.current.focus();\n        },\n        count\n    }), [num]);\n\n    return (\n        <div className=\"box\">\n            <div>count: {count}</div>\n            <div>num: {num}</div>\n            <input type=\"text\" ref={inputRef} />\n            <button onClick={ () => setCount(count + 1)}>setCount</button>\n            <button onClick={ () => setNum(num + 1)}>setNum</button>\n        </div>\n    )\n})\n\nexport default () => {\n    const el = useRef(null);\n    return (\n        <div className=\"box\">\n            <div className=\"red\">{`该钩子函数还有第三个参数，如果里面涉及到某个变化的值，只有当第三个参数发生改变时，父组件接收到的该值才会发生改变`}</div>\n            <Child ref={el} />\n            <button onClick={() => console.log(el)}>获取子组件暴露给父组件的东西</button>\n        </div>\n    )\n}\n","/Users/wangmeng/Documents/me/react-demop/src/hooks/useLayoutEffect/Index.js",["221"],"/Users/wangmeng/Documents/me/react-demop/src/hooks/useLayoutEffect/Target.js",["222","223"],"/Users/wangmeng/Documents/me/react-demop/src/hooks/customHook/Index.js",["224"],"/Users/wangmeng/Documents/me/react-demop/src/hooks/customHook/UseWinSize.js",["225","226"],{"ruleId":"227","severity":1,"message":"228","line":9,"column":19,"nodeType":"229","messageId":"230","endLine":9,"endColumn":26},{"ruleId":"227","severity":1,"message":"231","line":9,"column":28,"nodeType":"229","messageId":"230","endLine":9,"endColumn":38},{"ruleId":"227","severity":1,"message":"232","line":9,"column":40,"nodeType":"229","messageId":"230","endLine":9,"endColumn":52},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"233","replacedBy":"237"},{"ruleId":"235","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":27,"column":5,"nodeType":"241","messageId":"242","endLine":29,"endColumn":6},{"ruleId":"227","severity":1,"message":"243","line":3,"column":5,"nodeType":"229","messageId":"230","endLine":3,"endColumn":9},{"ruleId":"227","severity":1,"message":"244","line":42,"column":17,"nodeType":"229","messageId":"230","endLine":42,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":4,"column":5,"nodeType":"241","messageId":"242","endLine":6,"endColumn":6},{"ruleId":"227","severity":1,"message":"245","line":21,"column":17,"nodeType":"229","messageId":"230","endLine":21,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":4,"column":5,"nodeType":"241","messageId":"242","endLine":6,"endColumn":6},{"ruleId":"233","replacedBy":"246"},{"ruleId":"235","replacedBy":"247"},{"ruleId":"227","severity":1,"message":"248","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":27},{"ruleId":"249","severity":1,"message":"250","line":19,"column":1,"nodeType":"251","endLine":37,"endColumn":2},{"ruleId":"227","severity":1,"message":"252","line":1,"column":40,"nodeType":"229","messageId":"230","endLine":1,"endColumn":44},{"ruleId":"249","severity":1,"message":"250","line":6,"column":1,"nodeType":"251","endLine":35,"endColumn":2},{"ruleId":"249","severity":1,"message":"250","line":4,"column":1,"nodeType":"251","endLine":15,"endColumn":2},{"ruleId":"227","severity":1,"message":"253","line":1,"column":29,"nodeType":"229","messageId":"230","endLine":1,"endColumn":37},{"ruleId":"249","severity":1,"message":"250","line":27,"column":1,"nodeType":"251","endLine":42,"endColumn":2},{"ruleId":"227","severity":1,"message":"254","line":1,"column":35,"nodeType":"229","messageId":"230","endLine":1,"endColumn":42},{"ruleId":"227","severity":1,"message":"255","line":13,"column":16,"nodeType":"229","messageId":"230","endLine":13,"endColumn":21},{"ruleId":"227","severity":1,"message":"256","line":42,"column":11,"nodeType":"229","messageId":"230","endLine":42,"endColumn":15},{"ruleId":"227","severity":1,"message":"257","line":61,"column":15,"nodeType":"229","messageId":"230","endLine":61,"endColumn":19},{"ruleId":"227","severity":1,"message":"258","line":1,"column":29,"nodeType":"229","messageId":"230","endLine":1,"endColumn":48},{"ruleId":"227","severity":1,"message":"253","line":1,"column":58,"nodeType":"229","messageId":"230","endLine":1,"endColumn":66},{"ruleId":"227","severity":1,"message":"259","line":1,"column":68,"nodeType":"229","messageId":"230","endLine":1,"endColumn":79},{"ruleId":"227","severity":1,"message":"260","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":12},{"ruleId":"227","severity":1,"message":"261","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":13},{"ruleId":"249","severity":1,"message":"250","line":19,"column":1,"nodeType":"251","endLine":39,"endColumn":2},{"ruleId":"227","severity":1,"message":"258","line":1,"column":29,"nodeType":"229","messageId":"230","endLine":1,"endColumn":48},{"ruleId":"227","severity":1,"message":"262","line":1,"column":50,"nodeType":"229","messageId":"230","endLine":1,"endColumn":56},{"ruleId":"227","severity":1,"message":"253","line":1,"column":58,"nodeType":"229","messageId":"230","endLine":1,"endColumn":66},{"ruleId":"227","severity":1,"message":"259","line":1,"column":68,"nodeType":"229","messageId":"230","endLine":1,"endColumn":79},{"ruleId":"227","severity":1,"message":"263","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":15},{"ruleId":"227","severity":1,"message":"264","line":20,"column":7,"nodeType":"229","messageId":"230","endLine":20,"endColumn":16},{"ruleId":"249","severity":1,"message":"250","line":24,"column":1,"nodeType":"251","endLine":40,"endColumn":2},{"ruleId":"227","severity":1,"message":"258","line":1,"column":29,"nodeType":"229","messageId":"230","endLine":1,"endColumn":48},{"ruleId":"227","severity":1,"message":"253","line":1,"column":58,"nodeType":"229","messageId":"230","endLine":1,"endColumn":66},{"ruleId":"227","severity":1,"message":"259","line":1,"column":68,"nodeType":"229","messageId":"230","endLine":1,"endColumn":79},{"ruleId":"249","severity":1,"message":"250","line":7,"column":1,"nodeType":"251","endLine":27,"endColumn":2},{"ruleId":"249","severity":1,"message":"250","line":16,"column":1,"nodeType":"251","endLine":31,"endColumn":2},{"ruleId":"265","severity":1,"message":"266","line":15,"column":9,"nodeType":"267","endLine":15,"endColumn":14,"suggestions":"268"},{"ruleId":"249","severity":1,"message":"250","line":28,"column":1,"nodeType":"251","endLine":37,"endColumn":2},{"ruleId":"249","severity":1,"message":"250","line":4,"column":1,"nodeType":"251","endLine":16,"endColumn":2},{"ruleId":"227","severity":1,"message":"269","line":1,"column":36,"nodeType":"229","messageId":"230","endLine":1,"endColumn":51},{"ruleId":"249","severity":1,"message":"250","line":8,"column":1,"nodeType":"251","endLine":36,"endColumn":3},{"ruleId":"249","severity":1,"message":"250","line":4,"column":1,"nodeType":"251","endLine":14,"endColumn":2},{"ruleId":"227","severity":1,"message":"270","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":13},{"ruleId":"265","severity":1,"message":"271","line":26,"column":8,"nodeType":"267","endLine":26,"endColumn":10,"suggestions":"272"},"no-unused-vars","'addFunc' is defined but never used.","Identifier","unusedVar","'removeFunc' is defined but never used.","'asyncAddFunc' is defined but never used.","no-native-reassign",["273"],"no-negated-in-lhs",["274"],["273"],["274"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'data' is assigned a value but never used.","'store' is assigned a value but never used.","'items' is assigned a value but never used.",["273"],["274"],"'useContext' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'memo' is defined but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'setTa' is assigned a value but never used.","'strC' is assigned a value but never used.","'setC' is assigned a value but never used.","'useImperativeHandle' is defined but never used.","'useCallback' is defined but never used.","'Left' is defined but never used.","'Right' is defined but never used.","'useRef' is defined but never used.","'Route' is defined but never used.","'TestInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useImperativeHandle has a missing dependency: 'count'. Either include it or remove the dependency array.","ArrayExpression",["275"],"'useLayoutEffect' is defined but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'changeSize'. Either include it or remove the dependency array.",["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},"Update the dependencies array to be: [count]",{"range":"281","text":"282"},"Update the dependencies array to be: [changeSize]",{"range":"283","text":"284"},[432,437],"[count]",[767,769],"[changeSize]"]